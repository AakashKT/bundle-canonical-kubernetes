#!/usr/bin/env python3


import os
import shutil
import argparse
import yaml


root_path = os.path.dirname(os.path.abspath(__file__))
required = ['k8s', 'cni']


class FragmentRequired(Exception):
    pass

class FragmentMissingComponenet(Exception):
    pass

class FragmentUnknown(Exception):
    pass


def get_args():
    parser = argparse.ArgumentParser(description='Build a Kubernetes bundle for Juju.')
    parser.add_argument('fragments', metavar='frags', type=str, nargs='+', help='the bundle fragments to include in this bundle')
    return parser.parse_args()


def fragment_paths(fragment):
    frag_path = os.path.join(root_path, 'fragments', os.path.join(*fragment.split('/')))
    return {
        'root': frag_path,
        'bundle': os.path.join(frag_path, 'bundle.yaml'),
        'readme': os.path.join(frag_path, 'README.md')
    }


def validate_required(fragments):
    frags = [f.split('/')[0] for f in fragments]
    for r in required:
        if not r in frags:
            raise FragmentRequired('Required fragment type %s not found.' % r)


def validate_components(fragments):
    for frag in fragments:
        paths = fragment_paths(frag)
        if not os.path.isdir(paths['root']):
            raise FragmentUnknown('Unknown fragment ' + frag)
        if not os.path.exists(paths['bundle']):
            raise FragmentMissingComponenet('Fragment %s does not contain bundle.yaml' % frag)
        if not os.path.exists(paths['readme']):
            raise FragmentMissingComponenet('Fragment %s does not contain README.md' % frag)


def merge(src, dst):
    #XXX: doesn't handle lists perfectly, but maybe well enough?
    for k, v in src.items():
        if isinstance(v, dict):
            n = dst.setdefault(k, {})
            merge(v, n)
        elif isinstance(v, list):
            dst.setdefault(k, [])
            dst[k] += v
        else:
            dst[k] = v


def main():
    args = get_args()
    validate_required(args.fragments)
    validate_components(args.fragments)
    bundle = {}
    readme = ""
    for frag in args.fragments:
        print('Processing fragment %s...' % frag)
        paths = fragment_paths(frag)
        with open(paths['bundle'], 'r') as f:
            frag_bundle = yaml.load(f)
        merge(frag_bundle, bundle)
        with open(paths['readme'], 'r') as f:
            frag_readme = f.read()
        readme = '\n'.join([readme, frag_readme])
    out_bundle_name = 'bundle-' + '-'.join([frag.split('/')[-1] for frag in args.fragments])
    if os.path.isdir(out_bundle_name):
        shutil.rmtree(out_bundle_name)
    os.mkdir(out_bundle_name)
    out_bundle_filename = os.path.join(out_bundle_name, 'bundle.yaml')
    with open(out_bundle_filename, 'w') as out_bundle_file:
        yaml.dump(bundle, out_bundle_file, default_flow_style=False)
    out_readme_filename = os.path.join(out_bundle_name, 'README.md')
    with open(out_readme_filename, 'w') as out_readme_file:
        out_readme_file.write(readme)
    print('Done. Your bundle can be found in %s' % os.path.abspath(out_bundle_name))


if __name__ == '__main__':
    main()


# TODO:
# - Sort the bits e.g., series then services then relations
# - Figure out annotations. Generate automatically? Just merge?
# - Make the readme generation a little fancier with templates?
# - Add localize option that reformats charm locations to a given path.
